package action

import (
	"os"

	"github.com/factly/bindu-server/config"
	"github.com/factly/bindu-server/model"
	"github.com/factly/bindu-server/util"
	"github.com/factly/x/loggerx"
	"github.com/go-chi/chi"
	"github.com/go-chi/chi/middleware"
	"github.com/go-chi/cors"
	"github.com/joho/godotenv"

	"github.com/factly/bindu-server/action/chart"
	"github.com/factly/bindu-server/action/medium"
	"github.com/factly/bindu-server/action/tag"
	"github.com/factly/bindu-server/action/template"
	"github.com/factly/bindu-server/action/theme"
	_ "github.com/factly/bindu-server/docs" // docs is generated by Swag CLI, you have to import it.
	httpSwagger "github.com/swaggo/http-swagger"
)

//RegisterRoutes - to register routes
func RegisterRoutes() *chi.Mux {
	godotenv.Load()

	// db migrations
	config.DB.AutoMigrate(
		&model.Chart{},
		&model.Medium{},
		&model.Tag{},
		&model.Template{},
		&model.Theme{},
	)

	// Adding foreignKey
	config.DB.Model(&model.Chart{}).AddForeignKey("featured_medium_id", "bi_medium(id)", "RESTRICT", "RESTRICT")
	config.DB.Model(&model.Chart{}).AddForeignKey("theme_id", "bi_theme(id)", "RESTRICT", "RESTRICT")
	config.DB.Model(&model.Chart{}).AddForeignKey("template_id", "bi_template(id)", "RESTRICT", "RESTRICT")

	// open log file
	file, err := os.OpenFile("logrus.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)

	r := chi.NewRouter()

	r.Use(middleware.RequestID)
	if err == nil {
		r.Use(loggerx.NewLogger(file))
	}
	r.Use(middleware.RealIP)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Heartbeat("/ping"))

	r.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token", "X-User", "X-Organisation"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300, // Maximum value not ignored by any of major browsers
	}))

	if envName, _ := os.LookupEnv("ENVIRONMENT_NAME"); envName == "development" {
		r.Get("/swagger/*", httpSwagger.WrapHandler)
	}

	r.With(util.CheckUser, util.GenerateOrganisation).Group(func(r chi.Router) {
		r.Mount("/charts", chart.Router())
		r.Mount("/media", medium.Router())
		r.Mount("/tags", tag.Router())
		r.Mount("/templates", template.Router())
		r.Mount("/themes", theme.Router())
	})

	return r

}
